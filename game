import tkinter as tk
from tkinter import messagebox
import random

# –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
questions = {
    "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥?": ["1696", "1703", "1705", "1721"],
    "–ö–∞–∫–æ–µ –∑–¥–∞–Ω–∏–µ –±—ã–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö?": ["–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å—Ç–≤–æ", "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å", "–î–æ–º–∏–∫ –ü–µ—Ç—Ä–∞ I", "–≠—Ä–º–∏—Ç–∞–∂"],
    "–í –∫–∞–∫–æ–º –≥–æ–¥—É –°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥ —Å—Ç–∞–ª —Å—Ç–æ–ª–∏—Ü–µ–π?": ["1703", "1705", "1712", "1721"],
    "–ö–∞–∫–æ–π –º—É–∑–µ–π –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –ø–µ—Ä–≤—ã–º –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ?": ["–ö—É–Ω—Å—Ç–∫–∞–º–µ—Ä–∞", "–≠—Ä–º–∏—Ç–∞–∂", "–†—É—Å—Å–∫–∏–π –º—É–∑–µ–π", "–ó–∏–º–Ω–∏–π –¥–≤–æ—Ä–µ—Ü"],
    "–ö–∞–∫–æ–π –º–æ—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º —à–∏—Ä–æ–∫–∏–º –≤ –°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥–µ?": ["–∫—Ä–∞—Å–Ω—ã–π –º–æ—Å—Ç", "–î–≤–æ—Ä—Ü–æ–≤—ã–π –º–æ—Å—Ç", "–¢—Ä–æ–∏—Ü–∫–∏–π –º–æ—Å—Ç", "–°–∏–Ω–∏–π –º–æ—Å—Ç"],
    "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–µ–Ω—è–ª–æ—Å—å –∏–º—è –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ù–µ–≤–µ?": ["1", "2", "3", "4"],
    "–ö–∞–∫–æ–π –≤–æ–∫–∑–∞–ª –°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º —Å—Ç–∞—Ä—ã–º?": ["–í–∏—Ç–µ–±—Å–∫–∏–π", "–ë–∞–ª—Ç–∏–π—Å–∫–∏–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "–§–∏–Ω–ª—è–Ω–¥—Å–∫–∏–π"],
    "–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ—Å—Ç—Ä–æ–≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ —è–≤–ª—è–µ—Ç—Å—è?": ["–ö–∞–º–µ–Ω–Ω—ã–π", "–í–∞—Å–∏–ª—å–µ–≤—Å–∫–∏–π", "–ï–ª–∞–≥–∏–Ω", "–ó–∞—è—á–∏–π"],
    "–°–∫–æ–ª—å–∫–æ —É –ù–µ–≤—ã —Ä—É–∫–∞–≤–æ–≤?": ["1", "2", "3", "4"],
    "–ß—Ç–æ –≤–µ–Ω—á–∞–µ—Ç —à–ø–∏–ª—å –ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å—Ç–≤–∞?": ["–∫–æ—Ä–∞–±–ª–∏–∫-—Ñ–ª—é–≥–µ—Ä", "—Ñ–ª–∞–∂–æ–∫-—Ñ–ª—é–≥–µ—Ä", "–∑–≤–µ–∑–¥–∞", "–∫—Ä–µ—Å—Ç"]
}

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
correct_answers = {
    "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∏ —Å—Ç—Ä–æ–∏—Ç—å –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥?": "1703",
    "–ö–∞–∫–æ–µ –∑–¥–∞–Ω–∏–µ –±—ã–ª–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ —Ä–∞–Ω—å—à–µ –≤—Å–µ—Ö?": "–î–æ–º–∏–∫ –ü–µ—Ç—Ä–∞ I",
    "–í –∫–∞–∫–æ–º –≥–æ–¥—É –°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥ —Å—Ç–∞–ª —Å—Ç–æ–ª–∏—Ü–µ–π?": "1712",
    "–ö–∞–∫–æ–π –º—É–∑–µ–π –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –ø–µ—Ä–≤—ã–º –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ?": "–ö—É–Ω—Å—Ç–∫–∞–º–µ—Ä–∞",
    "–ö–∞–∫–æ–π –º–æ—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º —à–∏—Ä–æ–∫–∏–º –≤ –°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥–µ?": "–°–∏–Ω–∏–π –º–æ—Å—Ç",
    "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–µ–Ω—è–ª–æ—Å—å –∏–º—è –≥–æ—Ä–æ–¥–∞ –Ω–∞ –ù–µ–≤–µ?": "3",
    "–ö–∞–∫–æ–π –≤–æ–∫–∑–∞–ª –°–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º—ã–º —Å—Ç–∞—Ä—ã–º?": "–í–∏—Ç–µ–±—Å–∫–∏–π",
    "–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –æ—Å—Ç—Ä–æ–≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ —è–≤–ª—è–µ—Ç—Å—è?": "–í–∞—Å–∏–ª—å–µ–≤—Å–∫–∏–π",
    "–°–∫–æ–ª—å–∫–æ —É –ù–µ–≤—ã —Ä—É–∫–∞–≤–æ–≤?": "2",
    "–ß—Ç–æ –≤–µ–Ω—á–∞–µ—Ç —à–ø–∏–ª—å –ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å—Ç–≤–∞?": "–∫–æ—Ä–∞–±–ª–∏–∫-—Ñ–ª—é–≥–µ—Ä"
}

#–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫–æ–π —Ç–µ—Å—Ç–∞
class QuizApp:
    def __init__(self, master):
        self.master = master
        self.master.title("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
        self.score = 0
        self.question_index = 0
        self.questions_list = random.sample(list(questions.keys()), 10)

        self.label = tk.Label(master, text="–ü—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –ø–æ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—É:", font=("Arial", 24))
        self.label.pack(pady=20)

        self.start_button = tk.Button(master, text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", command=self.start_quiz)
        self.start_button.pack(pady=10)

    #–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    def start_quiz(self):
        self.label.pack_forget()
        self.start_button.pack_forget()
        self.ask_question()

    #–û—Ç–æ–±—Ä–∞–∑–∏–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    def ask_question(self):
        if self.question_index < len(self.questions_list):
            question = self.questions_list[self.question_index]
            options = questions[question]
            random.shuffle(options)

            self.question_label = tk.Label(self.master, text=question, font=("Arial", 18))
            self.question_label.pack(pady=20)

            self.var = tk.StringVar()
            for option in options:
                rb = tk.Radiobutton(self.master, text=option, variable=self.var, value=option)
                rb.pack(anchor='w')

            self.next_button = tk.Button(self.master, text="–î–∞–ª–µ–µ", command=self.next_question)
            self.next_button.pack(pady=10)
        else:
            self.finish_quiz()

    #–ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–≤–µ—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    def next_question(self):
        if self.var.get() == correct_answers[self.questions_list[self.question_index]]:
            self.score += 1
        self.question_index += 1
        self.question_label.pack_forget()
        for widget in self.master.pack_slaves():
            if isinstance(widget, tk.Radiobutton) or isinstance(widget, tk.Button):
                widget.pack_forget()
        self.ask_question()

    #–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏
    def finish_quiz(self):
        for widget in self.master.pack_slaves():
            widget.pack_forget()

        self.label = tk.Label(self.master, text=f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {self.score} –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤.", font=("Arial", 18))
        self.label.pack(pady=20)

        if self.score > 6:
            emoji = "üòÑ"  # –í–µ—Å–µ–ª—ã–π —ç–º–æ–¥–∑–∏
        else:
            emoji = "üò¢"  # –ì—Ä—É—Å—Ç–Ω—ã–π —ç–º–æ–¥–∑–∏

        self.emoji_label = tk.Label(self.master, text=emoji, font=("Arial", 48))
        self.emoji_label.pack(pady=20)

        self.finish_button = tk.Button(self.master, text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", command=self.master.quit)
        self.finish_button.pack(pady=10)

if __name__ == "__main__":
    root = tk.Tk()
    app = QuizApp(root)
    root.mainloop()
